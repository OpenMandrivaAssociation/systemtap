--- systemtap-2.5/remote.cxx.0003~	2014-04-29 22:56:12.000000000 +0200
+++ systemtap-2.5/remote.cxx	2014-06-04 14:09:39.414712556 +0200
@@ -672,13 +672,16 @@ class unix_stapsh : public stapsh {
         for (unsigned i = 1; i < s.perpass_verbose[4]; i++)
           this->options.push_back("verbose");
 
-        sockaddr_un server;
-        server.sun_family = AF_UNIX;
+	union {
+	    sockaddr_un un;
+	    sockaddr sa;
+	} server;
+
         if (ud.path.empty())
           throw runtime_error(_("unix target requires a /path"));
-        if (ud.path.size() > sizeof(server.sun_path) - 1)
+        if (ud.path.size() > sizeof(server.un.sun_path) - 1)
           throw runtime_error(_("unix target /path is too long"));
-        strcpy(server.sun_path, ud.path.c_str());
+        strcpy(server.un.sun_path, ud.path.c_str());
 
         if (ud.has_authority)
           throw runtime_error(_("unix target doesn't support a hostname"));
@@ -691,12 +694,12 @@ class unix_stapsh : public stapsh {
         if (fd <= 0)
           throw runtime_error(_("error opening a socket"));
 
-        if (connect(fd, (struct sockaddr *)&server, SUN_LEN(&server)) < 0)
+        if (connect(fd, &server.sa, SUN_LEN(&server.un)) < 0)
           {
             const char *msg = strerror(errno);
             ::close(fd);
             throw runtime_error(_F("error connecting to socket %s: %s",
-                                    server.sun_path, msg));
+                                    server.un.sun_path, msg));
           }
 
         // Try to dup it, so class stapsh can have truly separate fds for its
